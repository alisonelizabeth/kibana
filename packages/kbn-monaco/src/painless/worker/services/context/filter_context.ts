/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

export const filterContext = {
  name: 'filter',
  classes: [
    {
      name: 'boolean',
      imported: true,
      constructors: [],
      static_methods: [],
      methods: [],
      static_fields: [],
      fields: [],
    },
    {
      name: 'byte',
      imported: true,
      constructors: [],
      static_methods: [],
      methods: [],
      static_fields: [],
      fields: [],
    },
    {
      name: 'char',
      imported: true,
      constructors: [],
      static_methods: [],
      methods: [],
      static_fields: [],
      fields: [],
    },
    {
      name: 'double',
      imported: true,
      constructors: [],
      static_methods: [],
      methods: [],
      static_fields: [],
      fields: [],
    },
    {
      name: 'float',
      imported: true,
      constructors: [],
      static_methods: [],
      methods: [],
      static_fields: [],
      fields: [],
    },
    {
      name: 'int',
      imported: true,
      constructors: [],
      static_methods: [],
      methods: [],
      static_fields: [],
      fields: [],
    },
    {
      name: 'java.lang.Appendable',
      imported: true,
      constructors: [],
      static_methods: [],
      methods: [
        {
          declaring: 'java.lang.Appendable',
          name: 'append',
          return: 'java.lang.Appendable',
          parameters: ['java.lang.CharSequence', 'int', 'int'],
        },
        {
          declaring: 'java.lang.Object',
          name: 'equals',
          return: 'boolean',
          parameters: ['java.lang.Object'],
        },
        {
          declaring: 'java.lang.Object',
          name: 'hashCode',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'toString',
          return: 'java.lang.String',
          parameters: [],
        },
      ],
      static_fields: [],
      fields: [],
    },
    {
      name: 'java.lang.ArithmeticException',
      imported: true,
      constructors: [
        {
          declaring: 'java.lang.ArithmeticException',
          parameters: [],
        },
        {
          declaring: 'java.lang.ArithmeticException',
          parameters: ['java.lang.String'],
        },
      ],
      static_methods: [],
      methods: [
        {
          declaring: 'java.lang.Object',
          name: 'equals',
          return: 'boolean',
          parameters: ['java.lang.Object'],
        },
        {
          declaring: 'java.lang.Throwable',
          name: 'getLocalizedMessage',
          return: 'java.lang.String',
          parameters: [],
        },
        {
          declaring: 'java.lang.Throwable',
          name: 'getMessage',
          return: 'java.lang.String',
          parameters: [],
        },
        {
          declaring: 'java.lang.Throwable',
          name: 'getStackTrace',
          return: '[Ljava.lang.StackTraceElement;',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'hashCode',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'toString',
          return: 'java.lang.String',
          parameters: [],
        },
      ],
      static_fields: [],
      fields: [],
    },
    {
      name: 'java.lang.ArrayIndexOutOfBoundsException',
      imported: true,
      constructors: [
        {
          declaring: 'java.lang.ArrayIndexOutOfBoundsException',
          parameters: [],
        },
        {
          declaring: 'java.lang.ArrayIndexOutOfBoundsException',
          parameters: ['java.lang.String'],
        },
      ],
      static_methods: [],
      methods: [
        {
          declaring: 'java.lang.Object',
          name: 'equals',
          return: 'boolean',
          parameters: ['java.lang.Object'],
        },
        {
          declaring: 'java.lang.Throwable',
          name: 'getLocalizedMessage',
          return: 'java.lang.String',
          parameters: [],
        },
        {
          declaring: 'java.lang.Throwable',
          name: 'getMessage',
          return: 'java.lang.String',
          parameters: [],
        },
        {
          declaring: 'java.lang.Throwable',
          name: 'getStackTrace',
          return: '[Ljava.lang.StackTraceElement;',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'hashCode',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'toString',
          return: 'java.lang.String',
          parameters: [],
        },
      ],
      static_fields: [],
      fields: [],
    },
    {
      name: 'java.lang.ArrayStoreException',
      imported: true,
      constructors: [
        {
          declaring: 'java.lang.ArrayStoreException',
          parameters: [],
        },
        {
          declaring: 'java.lang.ArrayStoreException',
          parameters: ['java.lang.String'],
        },
      ],
      static_methods: [],
      methods: [
        {
          declaring: 'java.lang.Object',
          name: 'equals',
          return: 'boolean',
          parameters: ['java.lang.Object'],
        },
        {
          declaring: 'java.lang.Throwable',
          name: 'getLocalizedMessage',
          return: 'java.lang.String',
          parameters: [],
        },
        {
          declaring: 'java.lang.Throwable',
          name: 'getMessage',
          return: 'java.lang.String',
          parameters: [],
        },
        {
          declaring: 'java.lang.Throwable',
          name: 'getStackTrace',
          return: '[Ljava.lang.StackTraceElement;',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'hashCode',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'toString',
          return: 'java.lang.String',
          parameters: [],
        },
      ],
      static_fields: [],
      fields: [],
    },
    {
      name: 'java.lang.Boolean',
      imported: true,
      constructors: [],
      static_methods: [
        {
          declaring: 'java.lang.Boolean',
          name: 'compare',
          return: 'int',
          parameters: ['boolean', 'boolean'],
        },
        {
          declaring: 'java.lang.Boolean',
          name: 'hashCode',
          return: 'int',
          parameters: ['boolean'],
        },
        {
          declaring: 'java.lang.Boolean',
          name: 'logicalAnd',
          return: 'boolean',
          parameters: ['boolean', 'boolean'],
        },
        {
          declaring: 'java.lang.Boolean',
          name: 'logicalOr',
          return: 'boolean',
          parameters: ['boolean', 'boolean'],
        },
        {
          declaring: 'java.lang.Boolean',
          name: 'logicalXor',
          return: 'boolean',
          parameters: ['boolean', 'boolean'],
        },
        {
          declaring: 'java.lang.Boolean',
          name: 'parseBoolean',
          return: 'boolean',
          parameters: ['java.lang.String'],
        },
        {
          declaring: 'java.lang.Boolean',
          name: 'toString',
          return: 'java.lang.String',
          parameters: ['boolean'],
        },
        {
          declaring: 'java.lang.Boolean',
          name: 'valueOf',
          return: 'java.lang.Boolean',
          parameters: ['boolean'],
        },
      ],
      methods: [
        {
          declaring: 'java.lang.Boolean',
          name: 'booleanValue',
          return: 'boolean',
          parameters: [],
        },
        {
          declaring: 'java.lang.Boolean',
          name: 'compareTo',
          return: 'int',
          parameters: ['java.lang.Boolean'],
        },
        {
          declaring: 'java.lang.Object',
          name: 'equals',
          return: 'boolean',
          parameters: ['java.lang.Object'],
        },
        {
          declaring: 'java.lang.Object',
          name: 'hashCode',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'toString',
          return: 'java.lang.String',
          parameters: [],
        },
      ],
      static_fields: [
        {
          declaring: 'java.lang.Boolean',
          name: 'FALSE',
          type: 'java.lang.Boolean',
        },
        {
          declaring: 'java.lang.Boolean',
          name: 'TRUE',
          type: 'java.lang.Boolean',
        },
      ],
      fields: [],
    },
    {
      name: 'java.lang.Byte',
      imported: true,
      constructors: [],
      static_methods: [
        {
          declaring: 'java.lang.Byte',
          name: 'compare',
          return: 'int',
          parameters: ['byte', 'byte'],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'decode',
          return: 'java.lang.Byte',
          parameters: ['java.lang.String'],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'hashCode',
          return: 'int',
          parameters: ['byte'],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'parseByte',
          return: 'byte',
          parameters: ['java.lang.String'],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'parseByte',
          return: 'byte',
          parameters: ['java.lang.String', 'int'],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'toString',
          return: 'java.lang.String',
          parameters: ['byte'],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'toUnsignedInt',
          return: 'int',
          parameters: ['byte'],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'toUnsignedLong',
          return: 'long',
          parameters: ['byte'],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'valueOf',
          return: 'java.lang.Byte',
          parameters: ['byte'],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'valueOf',
          return: 'java.lang.Byte',
          parameters: ['java.lang.String', 'int'],
        },
      ],
      methods: [
        {
          declaring: 'java.lang.Number',
          name: 'byteValue',
          return: 'byte',
          parameters: [],
        },
        {
          declaring: 'java.lang.Byte',
          name: 'compareTo',
          return: 'int',
          parameters: ['java.lang.Byte'],
        },
        {
          declaring: 'java.lang.Number',
          name: 'doubleValue',
          return: 'double',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'equals',
          return: 'boolean',
          parameters: ['java.lang.Object'],
        },
        {
          declaring: 'java.lang.Number',
          name: 'floatValue',
          return: 'float',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'hashCode',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.Number',
          name: 'intValue',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.Number',
          name: 'longValue',
          return: 'long',
          parameters: [],
        },
        {
          declaring: 'java.lang.Number',
          name: 'shortValue',
          return: 'short',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'toString',
          return: 'java.lang.String',
          parameters: [],
        },
      ],
      static_fields: [
        {
          declaring: 'java.lang.Byte',
          name: 'BYTES',
          type: 'int',
        },
        {
          declaring: 'java.lang.Byte',
          name: 'MAX_VALUE',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Byte',
          name: 'MIN_VALUE',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Byte',
          name: 'SIZE',
          type: 'int',
        },
      ],
      fields: [],
    },
    {
      name: 'java.lang.CharSequence',
      imported: true,
      constructors: [],
      static_methods: [],
      methods: [
        {
          declaring: 'java.lang.CharSequence',
          name: 'charAt',
          return: 'char',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.CharSequence',
          name: 'chars',
          return: 'java.util.stream.IntStream',
          parameters: [],
        },
        {
          declaring: 'java.lang.CharSequence',
          name: 'codePoints',
          return: 'java.util.stream.IntStream',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'equals',
          return: 'boolean',
          parameters: ['java.lang.Object'],
        },
        {
          declaring: 'java.lang.Object',
          name: 'hashCode',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.CharSequence',
          name: 'length',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'org.elasticsearch.painless.api.Augmentation',
          name: 'replaceAll',
          return: 'java.lang.String',
          parameters: ['java.util.regex.Pattern', 'java.util.function.Function'],
        },
        {
          declaring: 'org.elasticsearch.painless.api.Augmentation',
          name: 'replaceFirst',
          return: 'java.lang.String',
          parameters: ['java.util.regex.Pattern', 'java.util.function.Function'],
        },
        {
          declaring: 'java.lang.CharSequence',
          name: 'subSequence',
          return: 'java.lang.CharSequence',
          parameters: ['int', 'int'],
        },
        {
          declaring: 'java.lang.CharSequence',
          name: 'toString',
          return: 'java.lang.String',
          parameters: [],
        },
      ],
      static_fields: [],
      fields: [],
    },
    {
      name: 'java.lang.Character',
      imported: true,
      constructors: [],
      static_methods: [
        {
          declaring: 'java.lang.Character',
          name: 'charCount',
          return: 'int',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'codePointAt',
          return: 'int',
          parameters: ['java.lang.CharSequence', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'codePointAt',
          return: 'int',
          parameters: ['[C', 'int', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'codePointBefore',
          return: 'int',
          parameters: ['java.lang.CharSequence', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'codePointBefore',
          return: 'int',
          parameters: ['[C', 'int', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'codePointCount',
          return: 'int',
          parameters: ['java.lang.CharSequence', 'int', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'compare',
          return: 'int',
          parameters: ['char', 'char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'digit',
          return: 'int',
          parameters: ['int', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'forDigit',
          return: 'char',
          parameters: ['int', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'getDirectionality',
          return: 'byte',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'getName',
          return: 'java.lang.String',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'getNumericValue',
          return: 'int',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'getType',
          return: 'int',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'hashCode',
          return: 'int',
          parameters: ['char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'highSurrogate',
          return: 'char',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isAlphabetic',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isBmpCodePoint',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isDefined',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isDigit',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isHighSurrogate',
          return: 'boolean',
          parameters: ['char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isISOControl',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isIdentifierIgnorable',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isIdeographic',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isJavaIdentifierPart',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isJavaIdentifierStart',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isLetter',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isLetterOrDigit',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isLowerCase',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isMirrored',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isSpaceChar',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isSupplementaryCodePoint',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isSurrogate',
          return: 'boolean',
          parameters: ['char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isSurrogatePair',
          return: 'boolean',
          parameters: ['char', 'char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isTitleCase',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isUnicodeIdentifierPart',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isUnicodeIdentifierStart',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isUpperCase',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isValidCodePoint',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'isWhitespace',
          return: 'boolean',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'lowSurrogate',
          return: 'char',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'offsetByCodePoints',
          return: 'int',
          parameters: ['java.lang.CharSequence', 'int', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'offsetByCodePoints',
          return: 'int',
          parameters: ['[C', 'int', 'int', 'int', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'reverseBytes',
          return: 'char',
          parameters: ['char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'toChars',
          return: '[C',
          parameters: ['int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'toChars',
          return: 'int',
          parameters: ['int', '[C', 'int'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'toCodePoint',
          return: 'int',
          parameters: ['char', 'char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'toLowerCase',
          return: 'char',
          parameters: ['char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'toString',
          return: 'java.lang.String',
          parameters: ['char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'toTitleCase',
          return: 'char',
          parameters: ['char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'toUpperCase',
          return: 'char',
          parameters: ['char'],
        },
        {
          declaring: 'java.lang.Character',
          name: 'valueOf',
          return: 'java.lang.Character',
          parameters: ['char'],
        },
      ],
      methods: [
        {
          declaring: 'java.lang.Character',
          name: 'charValue',
          return: 'char',
          parameters: [],
        },
        {
          declaring: 'java.lang.Character',
          name: 'compareTo',
          return: 'int',
          parameters: ['java.lang.Character'],
        },
        {
          declaring: 'java.lang.Object',
          name: 'equals',
          return: 'boolean',
          parameters: ['java.lang.Object'],
        },
        {
          declaring: 'java.lang.Object',
          name: 'hashCode',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'toString',
          return: 'java.lang.String',
          parameters: [],
        },
      ],
      static_fields: [
        {
          declaring: 'java.lang.Character',
          name: 'BYTES',
          type: 'int',
        },
        {
          declaring: 'java.lang.Character',
          name: 'COMBINING_SPACING_MARK',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'CONNECTOR_PUNCTUATION',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'CONTROL',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'CURRENCY_SYMBOL',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DASH_PUNCTUATION',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DECIMAL_DIGIT_NUMBER',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_ARABIC_NUMBER',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_BOUNDARY_NEUTRAL',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_COMMON_NUMBER_SEPARATOR',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_EUROPEAN_NUMBER',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_LEFT_TO_RIGHT',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_NONSPACING_MARK',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_OTHER_NEUTRALS',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_PARAGRAPH_SEPARATOR',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_POP_DIRECTIONAL_FORMAT',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_RIGHT_TO_LEFT',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_SEGMENT_SEPARATOR',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_UNDEFINED',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'DIRECTIONALITY_WHITESPACE',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'ENCLOSING_MARK',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'END_PUNCTUATION',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'FINAL_QUOTE_PUNCTUATION',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'FORMAT',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'INITIAL_QUOTE_PUNCTUATION',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'LETTER_NUMBER',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'LINE_SEPARATOR',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'LOWERCASE_LETTER',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MATH_SYMBOL',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MAX_CODE_POINT',
          type: 'int',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MAX_HIGH_SURROGATE',
          type: 'char',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MAX_LOW_SURROGATE',
          type: 'char',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MAX_RADIX',
          type: 'int',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MAX_SURROGATE',
          type: 'char',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MAX_VALUE',
          type: 'char',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MIN_CODE_POINT',
          type: 'int',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MIN_HIGH_SURROGATE',
          type: 'char',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MIN_LOW_SURROGATE',
          type: 'char',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MIN_RADIX',
          type: 'int',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MIN_SUPPLEMENTARY_CODE_POINT',
          type: 'int',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MIN_SURROGATE',
          type: 'char',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MIN_VALUE',
          type: 'char',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MODIFIER_LETTER',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'MODIFIER_SYMBOL',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'NON_SPACING_MARK',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'OTHER_LETTER',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'OTHER_NUMBER',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'OTHER_PUNCTUATION',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'OTHER_SYMBOL',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'PARAGRAPH_SEPARATOR',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'PRIVATE_USE',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'SIZE',
          type: 'int',
        },
        {
          declaring: 'java.lang.Character',
          name: 'SPACE_SEPARATOR',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'START_PUNCTUATION',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'SURROGATE',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'TITLECASE_LETTER',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'UNASSIGNED',
          type: 'byte',
        },
        {
          declaring: 'java.lang.Character',
          name: 'UPPERCASE_LETTER',
          type: 'byte',
        },
      ],
      fields: [],
    },
    {
      name: 'java.lang.Character$Subset',
      imported: true,
      constructors: [],
      static_methods: [],
      methods: [
        {
          declaring: 'java.lang.Object',
          name: 'equals',
          return: 'boolean',
          parameters: ['java.lang.Object'],
        },
        {
          declaring: 'java.lang.Object',
          name: 'hashCode',
          return: 'int',
          parameters: [],
        },
        {
          declaring: 'java.lang.Object',
          name: 'toString',
          return: 'java.lang.String',
          parameters: [],
        },
      ],
      static_fields: [],
      fields: [],
    },
  ],
};
